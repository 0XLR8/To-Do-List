{"version":3,"sources":["layout/Header.js","layout/About.js","layout/NotFound.js","components/Todo.js","components/TodoList.js","components/AddTodo.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","to","className","About","NotFound","class","Todo","deleteText","props","checked","style","textDecoration","this","type","onChange","onCheck","bind","id","title","onClick","onDelete","React","Component","TodoList","todos","map","value","key","AddTodo","state","handleAddToDo","event","setState","target","name","handleAddButton","addTodo","App","handleCheck","newTodos","handleDelete","filter","handleAddTodo","newTodo","length","unshift","fetch","then","result","json","data","company","bs","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iXAeeA,G,YAXA,WACX,OACI,gCACI,0CACA,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,0BAAMC,UAAU,aAAhB,KACA,kBAAC,IAAD,CAAMD,GAAG,UAAT,YCEGE,G,MATD,WACV,OACI,yBAAKD,UAAU,QACX,0CACA,+FCIGE,EARE,WACb,OACI,yBAAKC,MAAM,QACP,2DCgBGC,G,kNAjBXC,WAAa,WACT,OAAG,EAAKC,MAAMC,QACH,eAEA,Q,uDAKX,OACI,yBAAKP,UAAU,QACX,uBAAGQ,MAAO,CAACC,eAAgBC,KAAKL,eAAe,2BAAOM,KAAK,WAAWC,SAAUF,KAAKJ,MAAMO,QAAQC,KAAKJ,KAAMA,KAAKJ,MAAMS,MAAzH,IAAkIL,KAAKJ,MAAMU,MAA7I,IAAoJ,4BAAQC,QAASP,KAAKJ,MAAMY,SAASJ,KAAKJ,KAAMA,KAAKJ,MAAMS,KAA3D,W,GAbjJI,IAAMC,YCQVC,EARE,SAACf,GACd,OACIA,EAAMgB,MAAMC,KAAI,SAAAC,GACZ,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAMT,GAAIC,MAAOQ,EAAMR,MAAOD,GAAIS,EAAMT,GAAIR,QAASiB,EAAMjB,QAASM,QAASP,EAAMO,QAASK,SAAUZ,EAAMY,e,QCiC3HQ,G,kNAlCXC,MAAQ,CACJX,MAAO,I,EAGXY,cAAgB,SAACC,GACb,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOP,S,EAGrDS,gBAAkB,WACU,KAArB,EAAKN,MAAMX,QACV,EAAKV,MAAM4B,QAAQ,EAAKP,MAAMX,OAC9B,EAAKc,SAAS,CAACd,MAAO,O,uDAK1B,OACI,yBAAKhB,UAAU,YACX,2BAAQA,UAAU,OACVW,KAAK,OACLqB,KAAK,QACLR,MAAOd,KAAKiB,MAAMX,MAClBJ,SAAUF,KAAKkB,gBAEvB,4BAAQ5B,UAAU,OACViB,QAASP,KAAKuB,iBADtB,kB,GA1BMd,IAAMC,YCkFbe,E,4MA1EXR,MAAQ,CACJL,MAAO,I,EAmBXc,YAAc,SAACrB,GACX,IAAMsB,EAAW,EAAKV,MAAML,MAAMC,KAAI,SAAAC,GAQlC,OAPGA,EAAMT,KAAOA,IACTS,EAAMjB,QACLiB,EAAMjB,SAAU,EAEhBiB,EAAMjB,SAAU,GAGjBiB,KAEX,EAAKM,SAAS,CAACR,MAAOe,K,EAG1BC,aAAe,SAACvB,GACZ,IAAMsB,EAAW,EAAKV,MAAML,MAAMiB,QAAO,SAAAf,GACrC,OAAOA,EAAMT,KAAOA,KAExB,EAAKe,SAAS,CAACR,MAAOe,K,EAG1BG,cAAgB,SAACxB,GACb,IAAMyB,EAAU,CACZ1B,GAAI,EAAKY,MAAML,MAAMoB,OAAS,EAC9B1B,MAAOA,EACPT,SAAS,GAET8B,EAAW,EAAKV,MAAML,MAC1Be,EAASM,QAAQF,GACjB,EAAKX,SAAS,CAACR,MAAOe,K,kEA7CL,IAAD,OAChBO,MAAM,8CACDC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GACF,IAAMX,EAAWW,EAAKzB,KAAI,SAAAC,GACtB,MAAO,CACHT,GAAIS,EAAMT,GACVC,MAAOQ,EAAMyB,QAAQC,GACrB3C,SAAS,MAGjB,EAAKuB,SAAS,CAACR,MAAOe,S,+BAsC9B,OACI,kBAAC,IAAD,KACI,yBAAKrC,UAAU,aACX,kBAAC,EAAD,MACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,CAASlB,QAASxB,KAAK8B,gBACvB,kBAAC,EAAD,CAAUlB,MAAOZ,KAAKiB,MAAML,MAClBT,QAASH,KAAK0B,YACdlB,SAAUR,KAAK4B,gBAG7B,kBAAC,IAAD,CAAOc,KAAK,UAAZ,IAAsB,kBAAC,EAAD,MAAtB,KACA,kBAAC,IAAD,CAAOC,UAAWnD,W,GApE5BiB,IAAMC,WCGJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.622b6cd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header>\r\n            <h1>To Do List</h1>\r\n            <Link to=\"/\">Home</Link>\r\n            <span className=\"separator\">|</span>\r\n            <Link to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./Page.css\";\r\n\r\nconst About = () => {\r\n    return(\r\n        <div className=\"page\">\r\n            <h1>About Page</h1>\r\n            <p>This is my functional To Do List ReactJS application example.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport \"./Page.css\";\r\n\r\nconst NotFound = () => {\r\n    return(\r\n        <div class=\"page\">\r\n            <h1>404 Error: Page Not Found</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport \"./Todo.css\";\r\n\r\nclass Todo extends React.Component{\r\n\r\n    deleteText = () => {\r\n        if(this.props.checked){\r\n            return \"line-through\";\r\n        }else{\r\n            return \"none\";\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"todo\">\r\n                <p style={{textDecoration: this.deleteText()}}><input type=\"checkbox\" onChange={this.props.onCheck.bind(this, this.props.id)} /> {this.props.title} <button onClick={this.props.onDelete.bind(this, this.props.id)} >X</button></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = (props) => {\r\n    return(\r\n        props.todos.map(value => {\r\n            return <Todo key={value.id} title={value.title} id={value.id} checked={value.checked} onCheck={props.onCheck} onDelete={props.onDelete} />\r\n        })\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport \"./AddTodo.css\";\r\n\r\nclass AddTodo extends React.Component{\r\n\r\n    state = {\r\n        title: \"\"\r\n    }\r\n\r\n    handleAddToDo = (event) => {\r\n        this.setState({[event.target.name]: event.target.value});\r\n    }\r\n\r\n    handleAddButton = () => {\r\n        if(this.state.title !== \"\"){\r\n            this.props.addTodo(this.state.title);\r\n            this.setState({title: \"\"});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"add-todo\">\r\n                <input  className=\"item\" \r\n                        type=\"text\"\r\n                        name=\"title\" \r\n                        value={this.state.title}  \r\n                        onChange={this.handleAddToDo} \r\n                />\r\n                <button className=\"item\"\r\n                        onClick={this.handleAddButton}\r\n                >\r\n                    Add To do\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Header from \"../layout/Header\";\r\nimport About from \"../layout/About\";\r\nimport NotFound from '../layout/NotFound';\r\nimport TodoList from \"../components/TodoList\";\r\nimport AddTodo from '../components/AddTodo';\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {\r\n        todos: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                const newTodos = data.map(value => {\r\n                    return {\r\n                        id: value.id,\r\n                        title: value.company.bs,\r\n                        checked: false\r\n                    }\r\n                })\r\n                this.setState({todos: newTodos});\r\n            })\r\n\r\n    }\r\n\r\n    handleCheck = (id) => {\r\n        const newTodos = this.state.todos.map(value => {\r\n            if(value.id === id){\r\n                if(value.checked){\r\n                    value.checked = false;\r\n                }else{\r\n                    value.checked = true;\r\n                }\r\n            }\r\n            return value;\r\n        })\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    handleDelete = (id) => {\r\n        const newTodos = this.state.todos.filter(value => {\r\n            return value.id !== id;\r\n        })\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    handleAddTodo = (title) => {\r\n        const newTodo = {\r\n            id: this.state.todos.length + 1,\r\n            title: title,\r\n            checked: false\r\n        }\r\n        let newTodos = this.state.todos;\r\n        newTodos.unshift(newTodo);\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Router>\r\n                <div className=\"container\">\r\n                    <Header />\r\n                        <Switch>\r\n                            <Route exact path=\"/\">\r\n                                <AddTodo addTodo={this.handleAddTodo} />\r\n                                <TodoList todos={this.state.todos} \r\n                                          onCheck={this.handleCheck}\r\n                                          onDelete={this.handleDelete}          \r\n                                />\r\n                            </Route>\r\n                            <Route path=\"/about\"> <About /> </Route>\r\n                            <Route component={NotFound} />\r\n                        </Switch>\r\n                </div>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}